name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate-path:
          - crates/ferra_lexer
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
      - name: Format
        run: cargo fmt --manifest-path ${{ matrix.crate-path }}/Cargo.toml -- --check
      - name: Clippy
        run: cargo clippy --manifest-path ${{ matrix.crate-path }}/Cargo.toml --all-targets -- -D warnings
      - name: Test
        run: cargo test --manifest-path ${{ matrix.crate-path }}/Cargo.toml

  fmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - run: cargo fmt -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - run: cargo clippy --all-targets -- -D warnings

  test:
    name: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo test --workspace

  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets -- -D warnings # Treat all warnings as errors

      - name: Run tests
        run: cargo test --all-targets --verbose

      # Add cargo audit step once dependencies are added
      # - name: Security audit
      #   run: |
      #     cargo install cargo-audit
      #     cargo audit 

  fuzz:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    # Run fuzz tests on main branch pushes and nightly schedule
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run proptest fuzz tests (extended)
        run: |
          cd crates/ferra_lexer
          # Run proptest with more cases for better coverage
          PROPTEST_CASES=10000 cargo test fuzz --release -- --nocapture
        env:
          RUST_BACKTRACE: 1

      - name: Report fuzz results
        run: echo "âœ… Proptest fuzzing completed successfully" 