// Performance stress test cases
// Tests parser performance with deeply nested and complex constructs

// Deeply nested expressions (20 levels)
fn deeply_nested_expressions() -> i32 {
    return ((((((((((((((((((((1 + 2) * 3) - 4) / 5) % 6) + 7) * 8) - 9) / 10) % 11) + 12) * 13) - 14) / 15) % 16) + 17) * 18) - 19) / 20) % 21);
}

// Deeply nested function calls (15 levels)
fn deeply_nested_calls() {
    outer1(outer2(outer3(outer4(outer5(outer6(outer7(outer8(outer9(outer10(outer11(outer12(outer13(outer14(inner_function()))))))))))))));
}

// Deeply nested blocks (10 levels)
fn deeply_nested_blocks() {
    {
        {
            {
                {
                    {
                        {
                            {
                                {
                                    {
                                        {
                                            let deep_value = 42;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Large parameter list (50 parameters)
fn large_parameter_list(
    p1: i32, p2: i32, p3: i32, p4: i32, p5: i32,
    p6: i32, p7: i32, p8: i32, p9: i32, p10: i32,
    p11: i32, p12: i32, p13: i32, p14: i32, p15: i32,
    p16: i32, p17: i32, p18: i32, p19: i32, p20: i32,
    p21: i32, p22: i32, p23: i32, p24: i32, p25: i32,
    p26: i32, p27: i32, p28: i32, p29: i32, p30: i32,
    p31: i32, p32: i32, p33: i32, p34: i32, p35: i32,
    p36: i32, p37: i32, p38: i32, p39: i32, p40: i32,
    p41: i32, p42: i32, p43: i32, p44: i32, p45: i32,
    p46: i32, p47: i32, p48: i32, p49: i32, p50: i32
) -> i32 {
    return p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10 +
           p11 + p12 + p13 + p14 + p15 + p16 + p17 + p18 + p19 + p20 +
           p21 + p22 + p23 + p24 + p25 + p26 + p27 + p28 + p29 + p30 +
           p31 + p32 + p33 + p34 + p35 + p36 + p37 + p38 + p39 + p40 +
           p41 + p42 + p43 + p44 + p45 + p46 + p47 + p48 + p49 + p50;
}

// Complex nested control flow (5 levels)
fn complex_nested_control_flow() {
    for i in 0..10 {
        while i < 5 {
            if i % 2 == 0 {
                for j in 0..i {
                    if j > 2 {
                        while j < 8 {
                            if should_process(i, j) {
                                process_complex(i, j);
                            } else {
                                skip_processing();
                            }
                        }
                    }
                }
            }
        }
    }
}

// Large array literal (100 elements)
fn large_array() -> [i32] {
    return [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
    ];
}

// Complex chained member access (20 levels)
fn complex_chained_access() {
    let result = obj.field1.field2.field3.field4.field5
                    .field6.field7.field8.field9.field10
                    .field11.field12.field13.field14.field15
                    .field16.field17.field18.field19.field20;
}

// Deeply nested generic types (10 levels)
data DeeplyNestedGeneric<T> {
    value: Box<Vec<HashMap<String, Option<Result<Arc<Mutex<RwLock<Cell<RefCell<T>>>>>>>>>,
}

// Complex expression with all operators
fn complex_expression_stress() -> bool {
    return ((a + b * c - d / e % f) > (g + h)) && 
           ((i * j + k) <= (l - m * n)) ||
           ((o / p % q) == (r + s - t)) &&
           ((u * v + w / x) != (y - z + aa)) ||
           !((bb && cc) || (dd && ee && ff));
} 